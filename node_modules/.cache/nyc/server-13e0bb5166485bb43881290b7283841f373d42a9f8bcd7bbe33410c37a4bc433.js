function cov_1nbp4giuey(){var path="/home/bahati/html/my-brand/node-mongo-tutorial/server.js";var hash="851a8838505a660763c6edcb17b0bdeecb4da442";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/bahati/html/my-brand/node-mongo-tutorial/server.js",statementMap:{"0":{start:{line:1,column:16},end:{line:1,column:34}},"1":{start:{line:2,column:17},end:{line:2,column:36}},"2":{start:{line:3,column:12},end:{line:3,column:35}},"3":{start:{line:4,column:15},end:{line:4,column:32}},"4":{start:{line:5,column:15},end:{line:5,column:40}},"5":{start:{line:6,column:12},end:{line:6,column:21}},"6":{start:{line:7,column:15},end:{line:7,column:32}},"7":{start:{line:8,column:21},end:{line:8,column:45}},"8":{start:{line:9,column:18},end:{line:9,column:47}},"9":{start:{line:10,column:16},end:{line:24,column:1}},"10":{start:{line:25,column:20},end:{line:25,column:41}},"11":{start:{line:26,column:0},end:{line:26,column:68}},"12":{start:{line:392,column:0},end:{line:392,column:16}},"13":{start:{line:393,column:13},end:{line:393,column:37}},"14":{start:{line:395,column:0},end:{line:395,column:23}},"15":{start:{line:396,column:0},end:{line:396,column:23}},"16":{start:{line:398,column:0},end:{line:400,column:2}},"17":{start:{line:399,column:4},end:{line:399,column:52}},"18":{start:{line:403,column:0},end:{line:407,column:72}},"19":{start:{line:406,column:8},end:{line:406,column:38}},"20":{start:{line:407,column:22},end:{line:407,column:71}},"21":{start:{line:408,column:0},end:{line:410,column:2}},"22":{start:{line:409,column:4},end:{line:409,column:49}},"23":{start:{line:412,column:0},end:{line:412,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:398,column:17},end:{line:398,column:18}},loc:{start:{line:398,column:23},end:{line:400,column:1}},line:398},"1":{name:"(anonymous_1)",decl:{start:{line:405,column:10},end:{line:405,column:11}},loc:{start:{line:405,column:16},end:{line:407,column:5}},line:405},"2":{name:"(anonymous_2)",decl:{start:{line:407,column:13},end:{line:407,column:14}},loc:{start:{line:407,column:22},end:{line:407,column:71}},line:407},"3":{name:"(anonymous_3)",decl:{start:{line:408,column:13},end:{line:408,column:14}},loc:{start:{line:408,column:27},end:{line:410,column:1}},line:408}},branchMap:{"0":{loc:{start:{line:393,column:13},end:{line:393,column:37}},type:"binary-expr",locations:[{start:{line:393,column:13},end:{line:393,column:29}},{start:{line:393,column:33},end:{line:393,column:37}}],line:393}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"851a8838505a660763c6edcb17b0bdeecb4da442"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1nbp4giuey=function(){return actualCoverage;};}return actualCoverage;}cov_1nbp4giuey();const express=(cov_1nbp4giuey().s[0]++,require("express"));const mongoose=(cov_1nbp4giuey().s[1]++,require("mongoose"));const jwt=(cov_1nbp4giuey().s[2]++,require('jsonwebtoken'));const bcrypt=(cov_1nbp4giuey().s[3]++,require("bcrypt"));const routes=(cov_1nbp4giuey().s[4]++,require("./routes/index"));const app=(cov_1nbp4giuey().s[5]++,express());const dotenv=(cov_1nbp4giuey().s[6]++,require("dotenv"));const swaggerJSDoc=(cov_1nbp4giuey().s[7]++,require("swagger-jsdoc"));const swaggerUi=(cov_1nbp4giuey().s[8]++,require("swagger-ui-express"));const options=(cov_1nbp4giuey().s[9]++,{definition:{openapi:"3.0.0",info:{title:"Blog API Documentation",version:"1.0.0"},servers:[{url:"http://localhost:4000/api"}]},apis:["./server.js"]});const swaggerSpec=(cov_1nbp4giuey().s[10]++,swaggerJSDoc(options));cov_1nbp4giuey().s[11]++;app.use("/api-docs",swaggerUi.serve,swaggerUi.setup(swaggerSpec));/**
 * @swagger
 *  components:
 *    securitySchemes:
 *      bearerAuth:
 *        type: http
 *        scheme: bearer
 *        bearerFormat: JWT
 *    schemas:
 *      blogSchema:
 *        type: object
 *        properties:
 *          title:
 *            type: string
 *          subtitle:
 *            type: string
 *          image:
 *            type: string
 *          content:
 *            type: string
 *      messageSchema:
 *        type: object
 *        properties:
 *          name:
 *            type: string
 *          email:
 *            type: string
 *          message:
 *            type: string
 *      loginSchema:
 *        type: object
 *        properties:
 *          email:
 *            type: string
 *          password:
 *            type: string
 *      signupSchema:
 *        type: object
 *        properties:
 *          names:
 *            type: string
 *          email:
 *            type: string
 *          password:
 *            type: string
 *      adminSchema:
 *        type: object
 *        properties:
 *          names:
 *            type: string
 *          email:
 *            type: string
 *          password:
 *            type: string
 *      adminLoginSchema:
 *        type: object
 *        properties:
 *          email:
 *            type: string
 *          password:
 *            type: string
 *
 */ // BLOGS
/**
* @swagger
* /blogs:
*  get:
*      summary: This API is used to check if get method is working or not
*      description: This API is used to check if get method is working or not
*      responses:
*          200:
*              description: To test Get method
*/ /**
 * @swagger
 * /blogs:
 *  post:
 *    security:
 *      - bearerAuth: []
 *    summary: To add blog
 *    description: Used to add blog
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *           $ref: "#components/schemas/blogSchema"
 *    responses:
 *      200:
 *          description: Blog added successfully
 */ /**
 * @swagger
 * /blogs/{id}:
 *  get:
 *      summary: This API is used to check if get method on single blog is working or not
 *      description: This API is used to check if GET method on single blog is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: To test Get method
 */ /**
 * @swagger
 * /blogs/{id}:
 *  delete:
 *    security:
 *      - bearerAuth: []
 *    summary:  DELETE method on blogs is working or not
 *    description: DELETE method on blogs is working or not
 *    parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *    responses:
 *          200:
 *              description: User deleted successfully
 */ // MESSAGES
/**
 * @swagger
 * /messages:
 *  get:
 *    security:
 *      - bearerAuth: []
 *    summary: This API is used to check if get method is working or not
 *    description: This API is used to check if get method is working or not
 *    responses:
 *          200:
 *              description: To test Get method
 */ // /**
//  * @swagger
//  * /message/{id}:
//  *  get:
//  *      summary: This API is used to check if get method on single message is working or not
//  *      description: This API is used to check if GET method on single message is working or not
//  *      parameters:
//  *          - in: path
//  *            name: id
//  *            required: true
//  *            description: numeric ID required
//  *            schema:
//  *            type: integer
//  *      responses:
//  *          200:
//  *              description: To test Get method
//  */
/**
 * @swagger
 * /messages/{id}:
 *  delete:
 *    security:
 *      - bearerAuth: []
 *    summary:  DELETE method on messages is working or not
 *    description: DELETE method on Message is working or not
 *    parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *    responses:
 *          200:
 *              description: Message deleted successfully
 */ // USERS
/**
* @swagger
* /users:
*  get:
*      summary: This API is used to check if GET method on messages is working or not
*      description: This API is used to check if GET method on messages is working or not
*      responses:
*          200:
*              description: To test Get method
*/ /**
 * @swagger
 * users/{id}:
 *  get:
 *      summary: This API is used to check if get method on single user is working or not
 *      description: This API is used to check if GET method on single user is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: To test Get method
 */ /**
 * @swagger
 * /users:
 *  post:
 *    summary: Sign Up
 *    description: For registering new users
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *           $ref: "#components/schemas/signupSchema"
 *    responses:
 *      200:
 *          description: User registered successfully
 */ /**
 * @swagger
 * /users/{id}:
 *  delete:
 *      summary: This API is used to check if DELETE method on single user is working or not
 *      description: This API is used to check if DELETE method on single user is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: User deleted successfully
 */ // SIGN IN
/**
 * @swagger
 * /users/login:
 *  post:
 *    summary: Sign in to do extra things
 *    description: Used for authorized users only
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *           $ref: "#components/schemas/loginSchema"
 *    responses:
 *      200:
 *          description: User logged in
 */ //ADMINISTRATOR
/**
 * @swagger
 * /users/admin:
 *  post:
 *    summary: Sign in to do extra things
 *    description: Used for authorized users only
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *           $ref: "#components/schemas/adminSchema"
 *    responses:
 *      200:
 *          description: User logged in
 */ /**
 * @swagger
 * /users/login/admin:
 *  post:
 *    summary: Sign in to do extra things
 *    description: Used for authorized users only
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *           $ref: "#components/schemas/adminLoginSchema"
 *    responses:
 *      200:
 *          description: Admin logged in
 */ /**
 * @swagger
 * /users/admin/{id}:
 *  delete:
 *      summary: DELETE method on single admin is working or not
 *      description: DELETE method on single admin is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: Admin deleted successfully
 */cov_1nbp4giuey().s[12]++;dotenv.config();const port=(cov_1nbp4giuey().s[13]++,(cov_1nbp4giuey().b[0][0]++,process.env.PORT)||(cov_1nbp4giuey().b[0][1]++,3000));cov_1nbp4giuey().s[14]++;app.use(express.json());cov_1nbp4giuey().s[15]++;app.use("/api",routes);cov_1nbp4giuey().s[16]++;app.listen(port,()=>{cov_1nbp4giuey().f[0]++;cov_1nbp4giuey().s[17]++;console.log("Server is listening on port",port);});cov_1nbp4giuey().s[18]++;mongoose.set('strictQuery',false).connect(process.env.MONGO_URL,{useNewUrlParser:true}).then(()=>{cov_1nbp4giuey().f[1]++;cov_1nbp4giuey().s[19]++;console.log("connected to DB");}).catch(err=>{cov_1nbp4giuey().f[2]++;cov_1nbp4giuey().s[20]++;return console.log("Error, couldn't connect to db",err);});cov_1nbp4giuey().s[21]++;app.get("/",(req,res)=>{cov_1nbp4giuey().f[3]++;cov_1nbp4giuey().s[22]++;res.status(200).json({msg:"Welcome home"});});cov_1nbp4giuey().s[23]++;module.exports=app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,