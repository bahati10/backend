function cov_1nbp4giuey(){var path="/home/bahati/html/my-brand/node-mongo-tutorial/server.js";var hash="76e54a583cd75f29d1d8be43a915a4c65fae5fae";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/bahati/html/my-brand/node-mongo-tutorial/server.js",statementMap:{"0":{start:{line:1,column:16},end:{line:1,column:34}},"1":{start:{line:2,column:17},end:{line:2,column:36}},"2":{start:{line:3,column:12},end:{line:3,column:35}},"3":{start:{line:4,column:15},end:{line:4,column:32}},"4":{start:{line:5,column:15},end:{line:5,column:40}},"5":{start:{line:6,column:12},end:{line:6,column:21}},"6":{start:{line:7,column:15},end:{line:7,column:32}},"7":{start:{line:8,column:21},end:{line:8,column:45}},"8":{start:{line:9,column:18},end:{line:9,column:47}},"9":{start:{line:10,column:16},end:{line:25,column:1}},"10":{start:{line:26,column:20},end:{line:26,column:41}},"11":{start:{line:27,column:0},end:{line:27,column:68}},"12":{start:{line:246,column:0},end:{line:246,column:16}},"13":{start:{line:247,column:13},end:{line:247,column:37}},"14":{start:{line:249,column:0},end:{line:249,column:23}},"15":{start:{line:250,column:0},end:{line:250,column:23}},"16":{start:{line:252,column:0},end:{line:254,column:2}},"17":{start:{line:253,column:4},end:{line:253,column:52}},"18":{start:{line:257,column:0},end:{line:261,column:72}},"19":{start:{line:260,column:8},end:{line:260,column:38}},"20":{start:{line:261,column:22},end:{line:261,column:71}},"21":{start:{line:262,column:0},end:{line:264,column:2}},"22":{start:{line:263,column:4},end:{line:263,column:49}},"23":{start:{line:266,column:0},end:{line:266,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:252,column:17},end:{line:252,column:18}},loc:{start:{line:252,column:23},end:{line:254,column:1}},line:252},"1":{name:"(anonymous_1)",decl:{start:{line:259,column:10},end:{line:259,column:11}},loc:{start:{line:259,column:16},end:{line:261,column:5}},line:259},"2":{name:"(anonymous_2)",decl:{start:{line:261,column:13},end:{line:261,column:14}},loc:{start:{line:261,column:22},end:{line:261,column:71}},line:261},"3":{name:"(anonymous_3)",decl:{start:{line:262,column:13},end:{line:262,column:14}},loc:{start:{line:262,column:27},end:{line:264,column:1}},line:262}},branchMap:{"0":{loc:{start:{line:247,column:13},end:{line:247,column:37}},type:"binary-expr",locations:[{start:{line:247,column:13},end:{line:247,column:29}},{start:{line:247,column:33},end:{line:247,column:37}}],line:247}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"76e54a583cd75f29d1d8be43a915a4c65fae5fae"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1nbp4giuey=function(){return actualCoverage;};}return actualCoverage;}cov_1nbp4giuey();const express=(cov_1nbp4giuey().s[0]++,require("express"));const mongoose=(cov_1nbp4giuey().s[1]++,require("mongoose"));const jwt=(cov_1nbp4giuey().s[2]++,require('jsonwebtoken'));const bcrypt=(cov_1nbp4giuey().s[3]++,require("bcrypt"));const routes=(cov_1nbp4giuey().s[4]++,require("./routes/index"));const app=(cov_1nbp4giuey().s[5]++,express());const dotenv=(cov_1nbp4giuey().s[6]++,require("dotenv"));const swaggerJSDoc=(cov_1nbp4giuey().s[7]++,require("swagger-jsdoc"));const swaggerUi=(cov_1nbp4giuey().s[8]++,require("swagger-ui-express"));const options=(cov_1nbp4giuey().s[9]++,{definition:{openapi:"3.0.0",info:{title:"Blog API Documentation",version:"1.0.0"},servers:[{url:"http://localhost:4000/api"}]},apis:["./server.js"]});const swaggerSpec=(cov_1nbp4giuey().s[10]++,swaggerJSDoc(options));cov_1nbp4giuey().s[11]++;app.use("/api-docs",swaggerUi.serve,swaggerUi.setup(swaggerSpec));// BLOGS
/**
* @swagger
* /blogs:
*  get:
*      summary: This API is used to check if get method is working or not
*      description: This API is used to check if get method is working or not
*      responses:
*          200:
*              description: To test Get method
*/ /**
* @swagger
* /blogs:
*  post:
*      summary: This API is used to check if get method is working or not
*      description: This API is used to check if get method is working or not
*      parameters: 
*        - name: body           
*          in: body  
*          schema: 
*            properties:
*
*              title:
*                type: string
*                format: string
*                example: "Web Design"  
*
*              subtitle:   
*                type: string  
*                format: string
*                example: "Introduction to Web Design for all levels" 
*
*              image:   
*                type: string  
*                format: string
*                example: "https://images.unsplash.com/photo-1499750310107-5fef28a66643?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80"
*
*
*              content:   
*                type: string  
*                format: string
*                example: "Introduction to Web Design for all levels"
*
*      responses:
*          200:
*              description: To test POST method
*/ /**
 * @swagger
 * /blogs/{id}:
 *  get:
 *      summary: This API is used to check if get method on single blog is working or not
 *      description: This API is used to check if GET method on single blog is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: To test Get method
 */ /**
 * @swagger
 * /blogs/{id}:
 *  delete:
 *      summary: This API is used to check if DELETE method Oon single blog is working or not
 *      description: This API is used to check if DELETE method on single blog is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: Data deleted successfully
 */ // MESSAGES
/**
* @swagger
* /messages:
*  get:
*      summary: This API is used to check if GET method on messages is working or not
*      description: This API is used to check if GET method on messages is working or not
*      responses:
*          200:
*              description: To test Get method
*/ /**
 * @swagger
 * /message/{id}:
 *  get:
 *      summary: This API is used to check if get method on single message is working or not
 *      description: This API is used to check if GET method on single message is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: To test Get method
 */ /**
 * @swagger
 * /messages/{id}:
 *  delete:
 *      summary: This API is used to check if DELETE method on single message is working or not
 *      description: This API is used to check if DELETE method on single message is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: Data deleted successfully
 */ // USERS
/**
* @swagger
* /users:
*  get:
*      summary: This API is used to check if GET method on users is working or not
*      description: This API is used to check if GET method on users is working or not
*      responses:
*          200:
*              description: To test Get method
*/ /**
 * @swagger
 * users/{id}:
 *  get:
 *      summary: This API is used to check if get method on single user is working or not
 *      description: This API is used to check if GET method on single user is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: To test Get method
 */ /**
 * @swagger
 * /users/{id}:
 *  delete:
 *      summary: This API is used to check if DELETE method on single user is working or not
 *      description: This API is used to check if DELETE method on single user is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: Data deleted successfully
 */cov_1nbp4giuey().s[12]++;dotenv.config();const port=(cov_1nbp4giuey().s[13]++,(cov_1nbp4giuey().b[0][0]++,process.env.PORT)||(cov_1nbp4giuey().b[0][1]++,3000));cov_1nbp4giuey().s[14]++;app.use(express.json());cov_1nbp4giuey().s[15]++;app.use("/api",routes);cov_1nbp4giuey().s[16]++;app.listen(port,()=>{cov_1nbp4giuey().f[0]++;cov_1nbp4giuey().s[17]++;console.log("Server is listening on port",port);});cov_1nbp4giuey().s[18]++;mongoose.set('strictQuery',false).connect(process.env.MONGO_URL,{useNewUrlParser:true}).then(()=>{cov_1nbp4giuey().f[1]++;cov_1nbp4giuey().s[19]++;console.log("connected to DB");}).catch(err=>{cov_1nbp4giuey().f[2]++;cov_1nbp4giuey().s[20]++;return console.log("Error, couldn't connect to db",err);});cov_1nbp4giuey().s[21]++;app.get("/",(req,res)=>{cov_1nbp4giuey().f[3]++;cov_1nbp4giuey().s[22]++;res.status(200).json({msg:"Welcome home"});});cov_1nbp4giuey().s[23]++;module.exports=app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,