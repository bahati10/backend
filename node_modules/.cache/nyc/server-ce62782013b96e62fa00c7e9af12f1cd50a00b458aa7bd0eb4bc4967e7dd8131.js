function cov_1nbp4giuey(){var path="/home/bahati/html/my-brand/node-mongo-tutorial/server.js";var hash="1878aaf4f3ea85795a4ef01570854857042d526c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/bahati/html/my-brand/node-mongo-tutorial/server.js",statementMap:{"0":{start:{line:1,column:16},end:{line:1,column:34}},"1":{start:{line:2,column:17},end:{line:2,column:36}},"2":{start:{line:3,column:12},end:{line:3,column:35}},"3":{start:{line:4,column:15},end:{line:4,column:32}},"4":{start:{line:5,column:15},end:{line:5,column:40}},"5":{start:{line:6,column:12},end:{line:6,column:21}},"6":{start:{line:7,column:15},end:{line:7,column:32}},"7":{start:{line:8,column:21},end:{line:8,column:45}},"8":{start:{line:9,column:18},end:{line:9,column:47}},"9":{start:{line:10,column:16},end:{line:24,column:1}},"10":{start:{line:25,column:20},end:{line:25,column:41}},"11":{start:{line:26,column:0},end:{line:26,column:68}},"12":{start:{line:206,column:0},end:{line:206,column:16}},"13":{start:{line:207,column:13},end:{line:207,column:37}},"14":{start:{line:209,column:0},end:{line:209,column:23}},"15":{start:{line:210,column:0},end:{line:210,column:23}},"16":{start:{line:212,column:0},end:{line:214,column:2}},"17":{start:{line:213,column:4},end:{line:213,column:52}},"18":{start:{line:217,column:0},end:{line:221,column:72}},"19":{start:{line:220,column:8},end:{line:220,column:38}},"20":{start:{line:221,column:22},end:{line:221,column:71}},"21":{start:{line:222,column:0},end:{line:224,column:2}},"22":{start:{line:223,column:4},end:{line:223,column:49}},"23":{start:{line:226,column:0},end:{line:226,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:212,column:17},end:{line:212,column:18}},loc:{start:{line:212,column:23},end:{line:214,column:1}},line:212},"1":{name:"(anonymous_1)",decl:{start:{line:219,column:10},end:{line:219,column:11}},loc:{start:{line:219,column:16},end:{line:221,column:5}},line:219},"2":{name:"(anonymous_2)",decl:{start:{line:221,column:13},end:{line:221,column:14}},loc:{start:{line:221,column:22},end:{line:221,column:71}},line:221},"3":{name:"(anonymous_3)",decl:{start:{line:222,column:13},end:{line:222,column:14}},loc:{start:{line:222,column:27},end:{line:224,column:1}},line:222}},branchMap:{"0":{loc:{start:{line:207,column:13},end:{line:207,column:37}},type:"binary-expr",locations:[{start:{line:207,column:13},end:{line:207,column:29}},{start:{line:207,column:33},end:{line:207,column:37}}],line:207}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"1878aaf4f3ea85795a4ef01570854857042d526c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1nbp4giuey=function(){return actualCoverage;};}return actualCoverage;}cov_1nbp4giuey();const express=(cov_1nbp4giuey().s[0]++,require("express"));const mongoose=(cov_1nbp4giuey().s[1]++,require("mongoose"));const jwt=(cov_1nbp4giuey().s[2]++,require('jsonwebtoken'));const bcrypt=(cov_1nbp4giuey().s[3]++,require("bcrypt"));const routes=(cov_1nbp4giuey().s[4]++,require("./routes/index"));const app=(cov_1nbp4giuey().s[5]++,express());const dotenv=(cov_1nbp4giuey().s[6]++,require("dotenv"));const swaggerJSDoc=(cov_1nbp4giuey().s[7]++,require("swagger-jsdoc"));const swaggerUi=(cov_1nbp4giuey().s[8]++,require("swagger-ui-express"));const options=(cov_1nbp4giuey().s[9]++,{definition:{openapi:"3.0.0",info:{title:"Blog API Documentation",version:"1.0.0"},servers:[{url:"http://localhost:4000/api"}]},apis:["./server.js"]});const swaggerSpec=(cov_1nbp4giuey().s[10]++,swaggerJSDoc(options));cov_1nbp4giuey().s[11]++;app.use("/api-docs",swaggerUi.serve,swaggerUi.setup(swaggerSpec));// BLOGS
/**
* @swagger
* /blogs:
*  get:
*      summary: This API is used to check if get method is working or not
*      description: This API is used to check if get method is working or not
*      responses:
*          200:
*              description: To test Get method
*/ /**
 * @swagger
 * /blogs/{id}:
 *  get:
 *      summary: This API is used to check if get method on single blog is working or not
 *      description: This API is used to check if GET method on single blog is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: To test Get method
 */ /**
 * @swagger
 * /blogs/{id}:
 *  delete:
 *      summary: This API is used to check if DELETE method Oon single blog is working or not
 *      description: This API is used to check if DELETE method on single blog is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: Data deleted successfully
 */ // MESSAGES
/**
* @swagger
* /messages:
*  get:
*      summary: This API is used to check if GET method on messages is working or not
*      description: This API is used to check if GET method on messages is working or not
*      responses:
*          200:
*              description: To test Get method
*/ /**
 * @swagger
 * /message/{id}:
 *  get:
 *      summary: This API is used to check if get method on single message is working or not
 *      description: This API is used to check if GET method on single message is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: To test Get method
 */ /**
 * @swagger
 * /messages/{id}:
 *  delete:
 *      summary: This API is used to check if DELETE method on single message is working or not
 *      description: This API is used to check if DELETE method on single message is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: Data deleted successfully
 */ // USERS
/**
* @swagger
* /users:
*  get:
*      summary: This API is used to check if GET method on messages is working or not
*      description: This API is used to check if GET method on messages is working or not
*      responses:
*          200:
*              description: To test Get method
*/ /**
 * @swagger
 * users/{id}:
 *  get:
 *      summary: This API is used to check if get method on single user is working or not
 *      description: This API is used to check if GET method on single user is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: To test Get method
 */ /**
 * @swagger
 * /users/{id}:
 *  delete:
 *      summary: This API is used to check if DELETE method on single user is working or not
 *      description: This API is used to check if DELETE method on single user is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: Data deleted successfully
 */cov_1nbp4giuey().s[12]++;dotenv.config();const port=(cov_1nbp4giuey().s[13]++,(cov_1nbp4giuey().b[0][0]++,process.env.PORT)||(cov_1nbp4giuey().b[0][1]++,3000));cov_1nbp4giuey().s[14]++;app.use(express.json());cov_1nbp4giuey().s[15]++;app.use("/api",routes);cov_1nbp4giuey().s[16]++;app.listen(port,()=>{cov_1nbp4giuey().f[0]++;cov_1nbp4giuey().s[17]++;console.log("Server is listening on port",port);});cov_1nbp4giuey().s[18]++;mongoose.set('strictQuery',false).connect(process.env.MONGO_URL,{useNewUrlParser:true}).then(()=>{cov_1nbp4giuey().f[1]++;cov_1nbp4giuey().s[19]++;console.log("connected to DB");}).catch(err=>{cov_1nbp4giuey().f[2]++;cov_1nbp4giuey().s[20]++;return console.log("Error, couldn't connect to db",err);});cov_1nbp4giuey().s[21]++;app.get("/",(req,res)=>{cov_1nbp4giuey().f[3]++;cov_1nbp4giuey().s[22]++;res.status(200).json({msg:"Welcome home"});});cov_1nbp4giuey().s[23]++;module.exports=app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,