function cov_1nbp4giuey(){var path="/home/bahati/html/my-brand/node-mongo-tutorial/server.js";var hash="89fce4941ac152797df10778790fcb92cfca2a8b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/bahati/html/my-brand/node-mongo-tutorial/server.js",statementMap:{"0":{start:{line:1,column:16},end:{line:1,column:34}},"1":{start:{line:2,column:17},end:{line:2,column:36}},"2":{start:{line:3,column:12},end:{line:3,column:35}},"3":{start:{line:4,column:15},end:{line:4,column:32}},"4":{start:{line:5,column:15},end:{line:5,column:40}},"5":{start:{line:6,column:12},end:{line:6,column:21}},"6":{start:{line:7,column:15},end:{line:7,column:32}},"7":{start:{line:8,column:21},end:{line:8,column:45}},"8":{start:{line:9,column:18},end:{line:9,column:47}},"9":{start:{line:10,column:16},end:{line:24,column:1}},"10":{start:{line:25,column:20},end:{line:25,column:41}},"11":{start:{line:26,column:0},end:{line:26,column:68}},"12":{start:{line:78,column:0},end:{line:78,column:16}},"13":{start:{line:79,column:13},end:{line:79,column:37}},"14":{start:{line:81,column:0},end:{line:81,column:23}},"15":{start:{line:82,column:0},end:{line:82,column:23}},"16":{start:{line:84,column:0},end:{line:86,column:2}},"17":{start:{line:85,column:4},end:{line:85,column:52}},"18":{start:{line:89,column:0},end:{line:93,column:72}},"19":{start:{line:92,column:8},end:{line:92,column:38}},"20":{start:{line:93,column:22},end:{line:93,column:71}},"21":{start:{line:94,column:0},end:{line:96,column:2}},"22":{start:{line:95,column:4},end:{line:95,column:49}},"23":{start:{line:98,column:0},end:{line:98,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:84,column:17},end:{line:84,column:18}},loc:{start:{line:84,column:23},end:{line:86,column:1}},line:84},"1":{name:"(anonymous_1)",decl:{start:{line:91,column:10},end:{line:91,column:11}},loc:{start:{line:91,column:16},end:{line:93,column:5}},line:91},"2":{name:"(anonymous_2)",decl:{start:{line:93,column:13},end:{line:93,column:14}},loc:{start:{line:93,column:22},end:{line:93,column:71}},line:93},"3":{name:"(anonymous_3)",decl:{start:{line:94,column:13},end:{line:94,column:14}},loc:{start:{line:94,column:27},end:{line:96,column:1}},line:94}},branchMap:{"0":{loc:{start:{line:79,column:13},end:{line:79,column:37}},type:"binary-expr",locations:[{start:{line:79,column:13},end:{line:79,column:29}},{start:{line:79,column:33},end:{line:79,column:37}}],line:79}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"89fce4941ac152797df10778790fcb92cfca2a8b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1nbp4giuey=function(){return actualCoverage;};}return actualCoverage;}cov_1nbp4giuey();const express=(cov_1nbp4giuey().s[0]++,require("express"));const mongoose=(cov_1nbp4giuey().s[1]++,require("mongoose"));const jwt=(cov_1nbp4giuey().s[2]++,require('jsonwebtoken'));const bcrypt=(cov_1nbp4giuey().s[3]++,require("bcrypt"));const routes=(cov_1nbp4giuey().s[4]++,require("./routes/index"));const app=(cov_1nbp4giuey().s[5]++,express());const dotenv=(cov_1nbp4giuey().s[6]++,require("dotenv"));const swaggerJSDoc=(cov_1nbp4giuey().s[7]++,require("swagger-jsdoc"));const swaggerUi=(cov_1nbp4giuey().s[8]++,require("swagger-ui-express"));const options=(cov_1nbp4giuey().s[9]++,{definition:{openapi:"3.0.0",info:{title:"Blog API Documentation",version:"1.0.0"},servers:[{url:"http://localhost:4000/api"}]},apis:["./server.js"]});const swaggerSpec=(cov_1nbp4giuey().s[10]++,swaggerJSDoc(options));cov_1nbp4giuey().s[11]++;app.use("/api-docs",swaggerUi.serve,swaggerUi.setup(swaggerSpec));/**
* @swagger
* /blogs:
*  get:
*      summary: This API is used to check if get method is working or not
*      description: This API is used to check if get method is working or not
*      responses:
*          200:
*              description: To test Get method
*/ /**
 * @swagger
 * /blogs/{id}:
 *  get:
 *      summary: This API is used to check if get method is working or not
 *      description: This API is used to check if get method is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: To test Get method
 */ /**
 * @swagger
 * /blogs/{id}:
 *  delete:
 *      summary: This API is used to check if get method is working or not
 *      description: This API is used to check if get method is working or not
 *      parameters:
 *          - in: path
 *            name: id
 *            required: true
 *            description: numeric ID required
 *            schema:
 *            type: integer
 *      responses:
 *          200:
 *              description: Data deleted successfully
 */cov_1nbp4giuey().s[12]++;dotenv.config();const port=(cov_1nbp4giuey().s[13]++,(cov_1nbp4giuey().b[0][0]++,process.env.PORT)||(cov_1nbp4giuey().b[0][1]++,3000));cov_1nbp4giuey().s[14]++;app.use(express.json());cov_1nbp4giuey().s[15]++;app.use("/api",routes);cov_1nbp4giuey().s[16]++;app.listen(port,()=>{cov_1nbp4giuey().f[0]++;cov_1nbp4giuey().s[17]++;console.log("Server is listening on port",port);});cov_1nbp4giuey().s[18]++;mongoose.set('strictQuery',false).connect(process.env.MONGO_URL,{useNewUrlParser:true}).then(()=>{cov_1nbp4giuey().f[1]++;cov_1nbp4giuey().s[19]++;console.log("connected to DB");}).catch(err=>{cov_1nbp4giuey().f[2]++;cov_1nbp4giuey().s[20]++;return console.log("Error, couldn't connect to db",err);});cov_1nbp4giuey().s[21]++;app.get("/",(req,res)=>{cov_1nbp4giuey().f[3]++;cov_1nbp4giuey().s[22]++;res.status(200).json({msg:"Welcome home"});});cov_1nbp4giuey().s[23]++;module.exports=app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsIm1vbmdvb3NlIiwiand0IiwiYmNyeXB0Iiwicm91dGVzIiwiYXBwIiwiZG90ZW52Iiwic3dhZ2dlckpTRG9jIiwic3dhZ2dlclVpIiwib3B0aW9ucyIsImRlZmluaXRpb24iLCJvcGVuYXBpIiwiaW5mbyIsInRpdGxlIiwidmVyc2lvbiIsInNlcnZlcnMiLCJ1cmwiLCJhcGlzIiwic3dhZ2dlclNwZWMiLCJ1c2UiLCJzZXJ2ZSIsInNldHVwIiwiY29uZmlnIiwicG9ydCIsInByb2Nlc3MiLCJlbnYiLCJQT1JUIiwianNvbiIsImxpc3RlbiIsImNvbnNvbGUiLCJsb2ciLCJzZXQiLCJjb25uZWN0IiwiTU9OR09fVVJMIiwidXNlTmV3VXJsUGFyc2VyIiwidGhlbiIsImNhdGNoIiwiZXJyIiwiZ2V0IiwicmVxIiwicmVzIiwic3RhdHVzIiwibXNnIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZShcImV4cHJlc3NcIilcbmNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZShcIm1vbmdvb3NlXCIpXG5jb25zdCBqd3QgPSByZXF1aXJlKCdqc29ud2VidG9rZW4nKTtcbmNvbnN0IGJjcnlwdCA9IHJlcXVpcmUoXCJiY3J5cHRcIilcbmNvbnN0IHJvdXRlcyA9IHJlcXVpcmUoXCIuL3JvdXRlcy9pbmRleFwiKVxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuY29uc3QgZG90ZW52ID0gcmVxdWlyZShcImRvdGVudlwiKTtcbmNvbnN0IHN3YWdnZXJKU0RvYyA9IHJlcXVpcmUoXCJzd2FnZ2VyLWpzZG9jXCIpO1xuY29uc3Qgc3dhZ2dlclVpID0gcmVxdWlyZShcInN3YWdnZXItdWktZXhwcmVzc1wiKTtcbmNvbnN0IG9wdGlvbnMgPSB7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBvcGVuYXBpOiBcIjMuMC4wXCIsXG4gICAgICAgIGluZm86IHtcbiAgICAgICAgICAgIHRpdGxlOiBcIkJsb2cgQVBJIERvY3VtZW50YXRpb25cIixcbiAgICAgICAgICAgIHZlcnNpb246IFwiMS4wLjBcIixcbiAgICAgICAgfSxcbiAgICAgICAgc2VydmVyczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHVybDogXCJodHRwOi8vbG9jYWxob3N0OjQwMDAvYXBpXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgYXBpczogW1wiLi9zZXJ2ZXIuanNcIl0sXG59O1xuY29uc3Qgc3dhZ2dlclNwZWMgPSBzd2FnZ2VySlNEb2Mob3B0aW9ucyk7XG5hcHAudXNlKFwiL2FwaS1kb2NzXCIsIHN3YWdnZXJVaS5zZXJ2ZSwgc3dhZ2dlclVpLnNldHVwKHN3YWdnZXJTcGVjKSk7XG5cbi8qKlxuKiBAc3dhZ2dlclxuKiAvYmxvZ3M6XG4qICBnZXQ6XG4qICAgICAgc3VtbWFyeTogVGhpcyBBUEkgaXMgdXNlZCB0byBjaGVjayBpZiBnZXQgbWV0aG9kIGlzIHdvcmtpbmcgb3Igbm90XG4qICAgICAgZGVzY3JpcHRpb246IFRoaXMgQVBJIGlzIHVzZWQgdG8gY2hlY2sgaWYgZ2V0IG1ldGhvZCBpcyB3b3JraW5nIG9yIG5vdFxuKiAgICAgIHJlc3BvbnNlczpcbiogICAgICAgICAgMjAwOlxuKiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFRvIHRlc3QgR2V0IG1ldGhvZFxuKi9cblxuXG4vKipcbiAqIEBzd2FnZ2VyXG4gKiAvYmxvZ3Mve2lkfTpcbiAqICBnZXQ6XG4gKiAgICAgIHN1bW1hcnk6IFRoaXMgQVBJIGlzIHVzZWQgdG8gY2hlY2sgaWYgZ2V0IG1ldGhvZCBpcyB3b3JraW5nIG9yIG5vdFxuICogICAgICBkZXNjcmlwdGlvbjogVGhpcyBBUEkgaXMgdXNlZCB0byBjaGVjayBpZiBnZXQgbWV0aG9kIGlzIHdvcmtpbmcgb3Igbm90XG4gKiAgICAgIHBhcmFtZXRlcnM6XG4gKiAgICAgICAgICAtIGluOiBwYXRoXG4gKiAgICAgICAgICAgIG5hbWU6IGlkXG4gKiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlXG4gKiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBudW1lcmljIElEIHJlcXVpcmVkXG4gKiAgICAgICAgICAgIHNjaGVtYTpcbiAqICAgICAgICAgICAgdHlwZTogaW50ZWdlclxuICogICAgICByZXNwb25zZXM6XG4gKiAgICAgICAgICAyMDA6XG4gKiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFRvIHRlc3QgR2V0IG1ldGhvZFxuICovXG5cblxuLyoqXG4gKiBAc3dhZ2dlclxuICogL2Jsb2dzL3tpZH06XG4gKiAgZGVsZXRlOlxuICogICAgICBzdW1tYXJ5OiBUaGlzIEFQSSBpcyB1c2VkIHRvIGNoZWNrIGlmIGdldCBtZXRob2QgaXMgd29ya2luZyBvciBub3RcbiAqICAgICAgZGVzY3JpcHRpb246IFRoaXMgQVBJIGlzIHVzZWQgdG8gY2hlY2sgaWYgZ2V0IG1ldGhvZCBpcyB3b3JraW5nIG9yIG5vdFxuICogICAgICBwYXJhbWV0ZXJzOlxuICogICAgICAgICAgLSBpbjogcGF0aFxuICogICAgICAgICAgICBuYW1lOiBpZFxuICogICAgICAgICAgICByZXF1aXJlZDogdHJ1ZVxuICogICAgICAgICAgICBkZXNjcmlwdGlvbjogbnVtZXJpYyBJRCByZXF1aXJlZFxuICogICAgICAgICAgICBzY2hlbWE6XG4gKiAgICAgICAgICAgIHR5cGU6IGludGVnZXJcbiAqICAgICAgcmVzcG9uc2VzOlxuICogICAgICAgICAgMjAwOlxuICogICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBEYXRhIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5XG4gKi9cblxuXG5kb3RlbnYuY29uZmlnKCk7XG5jb25zdCBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCAzMDAwO1xuXG5hcHAudXNlKGV4cHJlc3MuanNvbigpKVxuYXBwLnVzZShcIi9hcGlcIiwgcm91dGVzKVxuXG5hcHAubGlzdGVuKHBvcnQsICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIlNlcnZlciBpcyBsaXN0ZW5pbmcgb24gcG9ydFwiLCBwb3J0KVxufSlcblxuXG5tb25nb29zZS5zZXQoJ3N0cmljdFF1ZXJ5JywgZmFsc2UpXG4gICAgLmNvbm5lY3QocHJvY2Vzcy5lbnYuTU9OR09fVVJMLCB7IHVzZU5ld1VybFBhcnNlcjogdHJ1ZSB9KVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJjb25uZWN0ZWQgdG8gREJcIilcbiAgICB9KS5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhcIkVycm9yLCBjb3VsZG4ndCBjb25uZWN0IHRvIGRiXCIsIGVycikpXG5hcHAuZ2V0KFwiL1wiLCAocmVxLCByZXMpID0+IHtcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IG1zZzogXCJXZWxjb21lIGhvbWVcIiB9KVxufSlcblxubW9kdWxlLmV4cG9ydHMgPSBhcHA7XG4iXSwibWFwcGluZ3MiOiJrMkZBZVk7QUFBQSwyRkFmWixLQUFNQSxRQUFPLDBCQUFHQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQ2xDLEtBQU1DLFNBQVEsMEJBQUdELE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFDcEMsS0FBTUUsSUFBRywwQkFBR0YsT0FBTyxDQUFDLGNBQWMsQ0FBQyxFQUNuQyxLQUFNRyxPQUFNLDBCQUFHSCxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQ2hDLEtBQU1JLE9BQU0sMEJBQUdKLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUN4QyxLQUFNSyxJQUFHLDBCQUFHTixPQUFPLEVBQUUsRUFDckIsS0FBTU8sT0FBTSwwQkFBR04sT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUNoQyxLQUFNTyxhQUFZLDBCQUFHUCxPQUFPLENBQUMsZUFBZSxDQUFDLEVBQzdDLEtBQU1RLFVBQVMsMEJBQUdSLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxFQUMvQyxLQUFNUyxRQUFPLDBCQUFHLENBQ1pDLFVBQVUsQ0FBRSxDQUNSQyxPQUFPLENBQUUsT0FBTyxDQUNoQkMsSUFBSSxDQUFFLENBQ0ZDLEtBQUssQ0FBRSx3QkFBd0IsQ0FDL0JDLE9BQU8sQ0FBRSxPQUNiLENBQUMsQ0FDREMsT0FBTyxDQUFFLENBQ0wsQ0FDSUMsR0FBRyxDQUFFLDJCQUNULENBQUMsQ0FFVCxDQUFDLENBQ0RDLElBQUksQ0FBRSxDQUFDLGFBQWEsQ0FDeEIsQ0FBQyxFQUNELEtBQU1DLFlBQVcsMkJBQUdYLFlBQVksQ0FBQ0UsT0FBTyxDQUFDLEVBQUMseUJBQzFDSixHQUFHLENBQUNjLEdBQUcsQ0FBQyxXQUFXLENBQUVYLFNBQVMsQ0FBQ1ksS0FBSyxDQUFFWixTQUFTLENBQUNhLEtBQUssQ0FBQ0gsV0FBVyxDQUFDLENBQUMsQ0FFbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFUQSxDQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FoQkEsQ0FtQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQWhCQSx5QkFtQkFaLE1BQU0sQ0FBQ2dCLE1BQU0sRUFBRSxDQUNmLEtBQU1DLEtBQUksMkJBQUcsNEJBQUFDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxJQUFJLCtCQUFJLElBQUksR0FBQyx5QkFFdENyQixHQUFHLENBQUNjLEdBQUcsQ0FBQ3BCLE9BQU8sQ0FBQzRCLElBQUksRUFBRSxDQUFDLDBCQUN2QnRCLEdBQUcsQ0FBQ2MsR0FBRyxDQUFDLE1BQU0sQ0FBRWYsTUFBTSxDQUFDLDBCQUV2QkMsR0FBRyxDQUFDdUIsTUFBTSxDQUFDTCxJQUFJLENBQUUsSUFBTSxrREFDbkJNLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDZCQUE2QixDQUFFUCxJQUFJLENBQUMsQ0FDcEQsQ0FBQyxDQUFDLDBCQUdGdEIsUUFBUSxDQUFDOEIsR0FBRyxDQUFDLGFBQWEsQ0FBRSxLQUFLLENBQUMsQ0FDN0JDLE9BQU8sQ0FBQ1IsT0FBTyxDQUFDQyxHQUFHLENBQUNRLFNBQVMsQ0FBRSxDQUFFQyxlQUFlLENBQUUsSUFBSyxDQUFDLENBQUMsQ0FDekRDLElBQUksQ0FBQyxJQUFNLGtEQUNSTixPQUFPLENBQUNDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUNsQyxDQUFDLENBQUMsQ0FBQ00sS0FBSyxDQUFFQyxHQUFHLEVBQUssd0RBQUFSLFFBQU8sQ0FBQ0MsR0FBRyxDQUFDLCtCQUErQixDQUFFTyxHQUFHLENBQUMsQ0FBRCxDQUFDLENBQUMsMEJBQ3hFaEMsR0FBRyxDQUFDaUMsR0FBRyxDQUFDLEdBQUcsQ0FBRSxDQUFDQyxHQUFHLENBQUVDLEdBQUcsR0FBSyxrREFDdkJBLEdBQUcsQ0FBQ0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDZCxJQUFJLENBQUMsQ0FBRWUsR0FBRyxDQUFFLGNBQWUsQ0FBQyxDQUFDLENBQ2pELENBQUMsQ0FBQywwQkFFRkMsTUFBTSxDQUFDQyxPQUFPLENBQUd2QyxHQUFHIn0=